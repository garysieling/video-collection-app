AWSTemplateFormatVersion: "2010-09-09"

Description: Video uploader

Parameters:
  UnauthenticatedUserRole:
    Type: String
    Description: Cognito Role for unauthenticated users
  AuthenticatedUserRole:
    Type: String
    Description: Cognito Role for authenticated users
  DatabasePassword:
    Type: String
    Description: Database password

#  DomainName:
#    Description: The path of the  file.
#    Type: String
#  CertificateArn:
#    Type: String

Resources:
  # TODO set this up automatically w/openid provider
  UserPool:
    Type: "AWS::Cognito::UserPool"      
    Properties:
      UserPoolName: "VideoCollectionAppUserPool"
      UsernameAttributes:
        - "email"
    # TODO ses

  VideoBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - POST
              - GET
              - PUT
              - DELETE
              - HEAD
            AllowedHeaders:
              - "*"

  VideoBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref VideoBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:Put*"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: VideoBucket
                  - "/*"
            Principal:  
              AWS:
                - !Ref UnauthenticatedUserRole

  WebsiteBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref WebsiteLogsBucket

      WebsiteConfiguration:
        IndexDocument: "index.html"
        ErrorDocument: "error.html"

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: "WebsiteBucket"
                  - "/*"
            Principal: "*"

  WebsiteLogsBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: LogDeliveryWrite

  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: !Sub "s3-origin-${WebsiteBucket}"
          ViewerProtocolPolicy: "redirect-to-https"
          ForwardedValues:
            QueryString: false
        DefaultRootObject: "index.html"
        Origins:
          - Id: !Sub "s3-origin-${WebsiteBucket}"
            DomainName: !GetAtt WebsiteBucket.DomainName
            OriginPath: ""
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OriginAccessIdentity}"
        #ViewerCertificate:
        #  SslSupportMethod: 'sni-only'
        #  AcmCertificateArn: !Ref CertificateArn

  OriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Access S3 bucket content only through CloudFront"

#  Certificate:
#    Type: AWS::CertificateManager::Certificate
#    Properties:
#      DomainName: !Ref DomainName
  VideoPlayerVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "192.168.0.0/16"

  SubnetAZ1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "192.168.0.0/17"
      VpcId: !Ref VideoPlayerVPC
      AvailabilityZone: "us-east-1a"

  SubnetAZ2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "192.168.128.0/17"
      VpcId: !Ref VideoPlayerVPC
      AvailabilityZone: "us-east-1b"

  DatabaseSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Video Collection Database Security Group"
      VpcId: !Ref VideoPlayerVPC

  DatabaseSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Subnet for the database"
      SubnetIds:
        - !Ref SubnetAZ1
        - !Ref SubnetAZ2

  Database:
    Type: "AWS::RDS::DBCluster"
    Properties:
      Engine: "aurora-postgresql"
      EngineMode: "serverless"
      MasterUserPassword: !Ref DatabasePassword
      MasterUsername: "videoplayer"
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup

Outputs:
  WebsiteBucketUrl:
    Description: Website Bucket Url
    Value: !GetAtt WebsiteBucket.WebsiteURL

  VideoBucketArn:
    Description: Video storage bucket
    Value: !GetAtt VideoBucket.Arn

  UserPoolName:
    Description: User Pool
    Value: !GetAtt UserPool.ProviderName

  UserPoolUrl:
    Description: User Pool Url
    Value: !GetAtt UserPool.ProviderURL
